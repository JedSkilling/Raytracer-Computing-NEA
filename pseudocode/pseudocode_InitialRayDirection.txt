#	Hardcoded values:
res_? is the number of pixels in a given direction

FoV	#	Values between 0 and 180 degrees
FoVScale <= tan(FoV / 2) #   Pre-computed value
screenRatio <= res_y/res_x #   Pre-computed value

AA_Strength	#	Anti-Aliasing strength - Value between 0 and 1

FUNCTION findPixelsRayDirection (x, y)	#	Runs on every pixel
    #	(x, y) is the pixel co-ordinate
    #	(0, 0) is the bottom left of the image
    #	res_x and res_y is the amount of pixels in the x and y directions

    xScale <= ((x + 0.5) / res_x) - 0.5     
    zScale <= ((y + 0.5) / res_y) - 0.5     
    #	The + 0.5 means the ray is sent to the center of a pixel
    #	Without it, the ray would head towards the bottom left of a pixel
	
    #	Random Sampling Section
    xOffset <= 0
    zOffset <= 0
    IF AntiAliasing is true
        R <= (AA_Strength) * sqrt(Random(0, 1))  #   Sqrt ensures uniform distribution
        theta <= Random(0, 2 * pi)
        xOffset <= R * cos(theta)
        zOffset <= R * sin(theta)
    END IF

	#	FoVScale accounts for current FoV angle, screenRatio accounts for the image size ratio
	newX = (xScale + xOffset) * FoVScale
	newZ = (zScale + zOffset) * FoVScale * screenRatio
    float3 pixelVector <= (newX, 1, newZ)

    rayDirection <= camera.camToWorldSpace(pixelVector)
    rayOrigin <= camera.Location

    return (rayOrigin, rayDirection - rayOrigin)